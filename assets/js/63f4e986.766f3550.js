"use strict";(self.webpackChunk_castore_docs_docusaurus=self.webpackChunk_castore_docs_docusaurus||[]).push([[950],{68954:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(28427),a=(n(2784),n(30876));const r={sidebar_position:11},i="EventBridge Message Bus Adapter",o={unversionedId:"resources/event-bridge-message-bus-adapter",id:"resources/event-bridge-message-bus-adapter",title:"EventBridge Message Bus Adapter",description:"DRY Castore MessageBus definition using AWS EventBridge.",source:"@site/docs/5-resources/11-event-bridge-message-bus-adapter.md",sourceDirName:"5-resources",slug:"/resources/event-bridge-message-bus-adapter",permalink:"/castore/docs/resources/event-bridge-message-bus-adapter",draft:!1,editUrl:"https://github.com/castor-dev/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5-resources/11-event-bridge-message-bus-adapter.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"In Memory Message Queue Adapter",permalink:"/castore/docs/resources/in-memory-message-queue-adapter"},next:{title:"In Memory Message Bus Adapter",permalink:"/castore/docs/resources/in-memory-message-bus-adapter"}},p={},l=[{value:"\ud83d\udce5 Installation",id:"-installation",level:2},{value:"\ud83d\udc69\u200d\ud83d\udcbb Usage",id:"-usage",level:2},{value:"\ud83e\udd14 How it works",id:"-how-it-works",level:2},{value:"\ud83d\udd11 IAM",id:"-iam",level:2}],d={toc:l},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"eventbridge-message-bus-adapter"},"EventBridge Message Bus Adapter"),(0,a.kt)("p",null,"DRY Castore ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/castore-dev/castore/#--messagebus"},(0,a.kt)("inlineCode",{parentName:"a"},"MessageBus"))," definition using ",(0,a.kt)("a",{parentName:"p",href:"https://aws.amazon.com/eventbridge/"},"AWS EventBridge"),"."),(0,a.kt)("h2",{id:"-installation"},"\ud83d\udce5 Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install @castore/event-bridge-message-bus-adapter\n\n# yarn\nyarn add @castore/event-bridge-message-bus-adapter\n")),(0,a.kt)("p",null,"This package has ",(0,a.kt)("inlineCode",{parentName:"p"},"@castore/core")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"@aws-sdk/client-eventbridge")," (above v3) as peer dependencies, so you will have to install them as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install @castore/core @aws-sdk/client-eventbridge\n\n# yarn\nyarn add @castore/core @aws-sdk/client-eventbridge\n")),(0,a.kt)("h2",{id:"-usage"},"\ud83d\udc69\u200d\ud83d\udcbb Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { EventBridgeClient } from '@aws-sdk/client-eventbridge';\n\nimport { EventBridgeMessageBusAdapter } from '@castore/event-bridge-message-bus-adapter';\n\nconst eventBridgeClient = new EventBridgeClient({});\n\nconst messageBusAdapter = new EventBridgeMessageBusAdapter({\n  eventBusName: 'my-event-bus-name',\n  eventBridgeClient,\n});\n\n// \ud83d\udc47 Alternatively, provide a getter\nconst messageBusAdapter = new EventBridgeMessageBusAdapter({\n  eventBusName: () => process.env.MY_EVENT_BUS_NAME,\n  eventBridgeClient,\n});\n\nconst appMessageBus = new NotificationMessageBus({\n  ...\n  messageBusAdapter\n})\n")),(0,a.kt)("p",null,"This will directly plug your MessageBus to EventBridge \ud83d\ude4c"),(0,a.kt)("h2",{id:"-how-it-works"},"\ud83e\udd14 How it works"),(0,a.kt)("p",null,"When publishing a message, its ",(0,a.kt)("inlineCode",{parentName:"p"},"eventStoreId")," is used as the message ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," and its event ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," is used as ",(0,a.kt)("inlineCode",{parentName:"p"},"detail-type")," (except for ",(0,a.kt)("inlineCode",{parentName:"p"},"AggregateExistsMessageBus")," for which a constant is used). The whole message is passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// \ud83d\udc47 Aggregate exists\n{\n  "source": "POKEMONS", // <= eventStoreId\n  "detail-type": "__AGGREGATE_EXISTS__", // <= constant\n  "detail": {\n    "eventStoreId": "POKEMONS",\n    "aggregateId": "123",\n  },\n  ... // <= Other technical EventBridge properties\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// \ud83d\udc47 Notification\n{\n  "source": "POKEMONS",\n  "detail-type": "POKEMON_APPEARED", // <= event type\n  "detail": {\n    "eventStoreId": "POKEMONS",\n    "event": {\n      "aggregateId": "123",\n      "version": 1,\n      "type": "POKEMON_APPEARED",\n      "timestamp": ...\n      ...\n    },\n  },\n  ...\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// \ud83d\udc47 State-carrying\n{\n  "source": "POKEMONS",\n  "detail-type": "POKEMON_APPEARED",\n  "detail": {\n    "eventStoreId": "POKEMONS",\n    "event": {\n      "aggregateId": "123",\n      ...\n    },\n    "aggregate": { ... } // <= aggregate\n  },\n  ...\n}\n')),(0,a.kt)("p",null,"On the listeners side, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"EventBridgeMessageBusMessage")," TS type to type your argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { EventBridgeMessageBusMessage } from '@castore/event-bridge-message-bus-adapter';\n\nconst listener = async (\n  message: EventBridgeMessageBusMessage<typeof appMessageBus>,\n) => {\n  // \ud83d\ude4c Correctly typed!\n  const { eventStoreId, event } = message.detail;\n};\n")),(0,a.kt)("p",null,"You can provide event store ids and event types if you listener only listens to specific event types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { EventBridgeMessageBusMessage } from '@castore/event-bridge-message-bus-adapter';\n\nconst listener = async (\n  message: EventBridgeMessageBusMessage<\n    typeof appMessageBus,\n    'POKEMONS', // <= Only listen to the 'POKEMONS' event store events (optional)\n    'POKEMON_APPEARED' // <= Only listen to 'POKEMON_APPEARED' events (optional)\n  >,\n) => {\n  // \ud83d\ude4c Correctly typed!\n  const { eventStoreId, event } = message.detail;\n};\n")),(0,a.kt)("h2",{id:"-iam"},"\ud83d\udd11 IAM"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"publishMessage")," method requires the ",(0,a.kt)("inlineCode",{parentName:"p"},"events:PutEvents")," IAM permission on the provided event bus."))}c.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var s=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=s.createContext({}),l=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return s.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=l(n),g=a,m=u["".concat(p,".").concat(g)]||u[g]||c[g]||r;return n?s.createElement(m,i(i({ref:t},d),{},{components:n})):s.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<r;l++)i[l]=n[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);