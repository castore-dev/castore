"use strict";(self.webpackChunk_castore_docs=self.webpackChunk_castore_docs||[]).push([[114],{82675:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>u,toc:()=>l});var a=n(52685),s=(n(27378),n(35318));const r={sidebar_position:2},o="\ud83d\udce8 Message Queues",u={unversionedId:"reacting-to-events/message-queues",id:"reacting-to-events/message-queues",title:"\ud83d\udce8 Message Queues",description:"Message Queues store the published messages until they are handled by a worker. The worker is unique and predictible. It consumes all messages indifferently of their content.",source:"@site/docs/4-reacting-to-events/2-message-queues.md",sourceDirName:"4-reacting-to-events",slug:"/reacting-to-events/message-queues",permalink:"/castore/docs/reacting-to-events/message-queues",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\u2709\ufe0f Messages",permalink:"/castore/docs/reacting-to-events/messages"},next:{title:"\ud83d\ude8c Message Buses",permalink:"/castore/docs/reacting-to-events/message-buses"}},i={},l=[],p={toc:l},g="wrapper";function c(e){let{components:t,...r}=e;return(0,s.kt)(g,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"-message-queues"},"\ud83d\udce8 Message Queues"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Message_queue"},"Message Queues")," store the published messages until they are handled by a ",(0,s.kt)("strong",{parentName:"p"},"worker"),". The worker is unique and predictible. It consumes all messages indifferently of their content."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Message Queue",src:n(15625).Z,width:"2594",height:"830"})),(0,s.kt)("p",null,"You can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"AggregateExistsMessageQueue"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"NotificationMessageQueue")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"StateCarryingMessageQueue")," classes to implement message queues:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { NotificationMessageQueue } from '@castore/core';\n\nconst appMessageQueue = new NotificationMessageQueue({\n  messageQueueId: 'APP_MESSAGE_QUEUE',\n  sourceEventStores: [pokemonsEventStore, trainersEventStore],\n});\n\nawait appMessageQueue.publishMessage({\n  // \ud83d\udc47 Typed as NotificationMessage of one of the source event stores\n  eventStoreId: 'POKEMONS',\n  event: {\n    type: 'POKEMON_LEVELED_UP',\n    ...\n  },\n});\n\n// Similar for AggregateExistsMessageQueue and StateCarryingMessageQueue\n")),(0,s.kt)("p",null,"Similarly to event stores, ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageQueue")," classes provide a boilerplate-free and type-safe interface to publish messages, but are NOT responsible for actually doing so. This is the responsibility of the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageQueueAdapter"),", that will connect it to your actual messaging solution:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { EventStore } from '@castore/core';\n\nawait messageQueue.publishMessage(...);\n// \u274c Will throw an `UndefinedMessageChannelAdapterError`\n\nconst messageQueue = new NotificationMessageQueue({\n  ...\n  // \ud83d\udc47 Provide it in the constructor\n  messageQueueAdapter: mySuperMessageQueueAdapter,\n});\n\n// \ud83d\udc47 ...or set/switch it in context later\nmessageQueue.messageChannelAdapter = mySuperMessageQueueAdapter;\n\nawait messageQueue.publishMessage(...);\n// \ud83d\ude4c Will work!\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"You can code your own ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageQueueAdapter")," (simply implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageChannelAdapter")," interface), but we highly recommend using an ",(0,s.kt)("a",{parentName:"p",href:"/castore/docs/packages#-message-queue-adapters"},"off-the-shelf adapter")," (if the messaging solution that you use does not have an adapter yet, feel free to create/upvote an issue, or contribute \ud83e\udd17).")),(0,s.kt)("p",null,"The adapter packages will also expose useful generics to type the arguments of your queue worker. For instance:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import type {\n  SQSMessageQueueMessage,\n  SQSMessageQueueMessageBody,\n} from '@castore/sqs-message-queue-adapter';\n\nconst appMessagesWorker = async ({ Records }: SQSMessageQueueMessage) => {\n  Records.forEach(({ body }) => {\n    // \ud83d\udc47 Correctly typed!\n    const recordBody: SQSMessageQueueMessageBody<typeof appMessageQueue> =\n      JSON.parse(body);\n  });\n};\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("b",null,"\ud83d\udd27 Reference")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constructor:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"messageQueueId ",(0,s.kt)("i",null,"(string)")),": A string identifying the message queue"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"sourceEventStores ",(0,s.kt)("i",null,"(EventStore[])")),": List of event stores that the message queue will broadcast events from"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"messageQueueAdapter ",(0,s.kt)("i",null,"(?MessageChannelAdapter)")),": Message queue adapter")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Properties:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"messageChannelId ",(0,s.kt)("i",null,"(string)")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const appMessageQueueId = appMessageQueue.messageChannelId;\n// => 'APP_MESSAGE_QUEUE'\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"sourceEventStores ",(0,s.kt)("i",null,"(EventStore[])")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const appMessageQueueSourceEventStores = appMessageQueue.sourceEventStores;\n// => [pokemonsEventStore, trainersEventStore...]\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"messageChannelAdapter ",(0,s.kt)("i",null,"?MessageChannelAdapter")),": Returns the associated message queue adapter (potentially undefined)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const appMessageQueueAdapter = appMessageQueue.messageChannelAdapter;\n// => undefined (we did not provide one in this example)\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u261d\ufe0f The ",(0,s.kt)("inlineCode",{parentName:"p"},"messageChannelAdapter")," is not read-only so you do not have to provide it right away.")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Async Methods:")),(0,s.kt)("p",null,"The following methods interact with the messaging solution of your application through a ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageQueueAdapter"),". They will throw an ",(0,s.kt)("inlineCode",{parentName:"p"},"UndefinedMessageChannelAdapterError")," if you did not provide one."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"publishMessage ",(0,s.kt)("i",null,"((message: Message, opt?: OptionsObj) => Promise<void>)")),": Publish a ",(0,s.kt)("code",null,"Message")," (of the appropriate type) to the message queue.",(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"OptionsObj")," contains the following properties:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"replay ",(0,s.kt)("i",null,"(?boolean = false)")),": Signals that the event is not happening in real-time, e.g. in maintenance or migration operations. This information can be used downstream to react appropriately. Check the implementation of you adapter for more details."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"publishMessages ",(0,s.kt)("i",null,"((messages: Message[], opt?: OptionsObj) => Promise<void>)")),": Publish several ",(0,s.kt)("code",null,"Messages")," (of the appropriate type) to the message queue. Options are similar to the ",(0,s.kt)("code",null,"publishMessage")," options."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"getAggregateAndPublishMessage ",(0,s.kt)("i",null,"((message: NotificationMessage) => Promise<void>)")),": ",(0,s.kt)("i",null,"(StateCarryingMessageQueues only)")," Append the matching aggregate (with correct version) to a ",(0,s.kt)("code",null,"NotificationMessage")," and turn it into a ",(0,s.kt)("code",null,"StateCarryingMessage")," before publishing it to the message queue. Uses the message queue event stores: Make sure that they have correct adapters set up.")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Type Helpers:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("code",null,"MessageChannelMessage"),": Given a ",(0,s.kt)("code",null,"MessageQueue"),", returns the TS type of its messages")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import type { MessageChannelMessage } from '@castore/core';\n\ntype AppMessage = MessageChannelMessage<typeof appMessageQueue>;\n\n// \ud83d\udc47 Equivalent to:\ntype AppMessage = EventStoreNotificationMessage<\n  typeof pokemonsEventStore | typeof trainersEventStore...\n>;\n"))))}c.isMDXComponent=!0},35318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(27378);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),g=l(n),d=s,m=g["".concat(i,".").concat(d)]||g[d]||c[d]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u[g]="string"==typeof e?e:s,o[1]=u;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},15625:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/messageQueue-48fb4432f031661210e3098eedb7a1c7.png"}}]);