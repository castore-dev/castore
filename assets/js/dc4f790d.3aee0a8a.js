"use strict";(self.webpackChunk_castore_docs=self.webpackChunk_castore_docs||[]).push([[672],{86705:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=s(52685),a=(s(27378),s(35318));const r={sidebar_position:3},o="\ud83d\ude8c Message Buses",i={unversionedId:"reacting-to-events/message-buses",id:"reacting-to-events/message-buses",title:"\ud83d\ude8c Message Buses",description:"Message Buses are used to spread messages to multiple listeners. Contrary to message queues, they do not store the message or wait for the listeners to respond. Often, filter patterns can also be used to trigger listeners or not based on the message content.",source:"@site/docs/4-reacting-to-events/3-message-buses.md",sourceDirName:"4-reacting-to-events",slug:"/reacting-to-events/message-buses",permalink:"/castore/docs/reacting-to-events/message-buses",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udce8 Message Queues",permalink:"/castore/docs/reacting-to-events/message-queues"},next:{title:"\ud83d\udd0c Connected Event Store",permalink:"/castore/docs/reacting-to-events/connected-event-store"}},l={},p=[],u={toc:p},g="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(g,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-message-buses"},"\ud83d\ude8c Message Buses"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"},"Message Buses")," are used to spread messages to multiple ",(0,a.kt)("strong",{parentName:"p"},"listeners"),". Contrary to message queues, they do not store the message or wait for the listeners to respond. Often, ",(0,a.kt)("strong",{parentName:"p"},"filter patterns")," can also be used to trigger listeners or not based on the message content."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Message Bus",src:s(83523).Z,width:"2001",height:"1279"})),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"AggregateExistsMessageBus"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationMessageBus")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"StateCarryingMessageBus")," classes to implement message buses:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { NotificationMessageBus } from '@castore/core';\n\nconst appMessageBus = new NotificationMessageBus({\n  messageBusId: 'APP_MESSAGE_BUSES',\n  sourceEventStores: [pokemonsEventStore, trainersEventStore...],\n});\n\nawait appMessageBus.publishMessage({\n  // \ud83d\udc47 Typed as NotificationMessage of one of the source event stores\n  eventStoreId: 'POKEMONS',\n  event: {\n    type: 'POKEMON_LEVELED_UP',\n    ...\n  }\n})\n\n// Similar for AggregateExistsMessageBus and StateCarryingMessageBus\n")),(0,a.kt)("p",null,"Similarly to event stores, ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageBus")," classes provide a boilerplate-free and type-safe interface to publish messages, but are NOT responsible for actually doing so. This is the responsibility of the ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageBusAdapter"),", that will connect it to your actual messaging solution:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { EventStore } from '@castore/core';\n\nawait messageBus.publishMessage(...);\n// \u274c Will throw an `UndefinedMessageChannelAdapterError`\n\nconst messageBus = new NotificationMessageBus({\n  ...\n  // \ud83d\udc47 Provide it in the constructor\n  messageBusAdapter: mySuperMessageBusAdapter,\n});\n\n// \ud83d\udc47 ...or set/switch it in context later\nmessageBus.messageChannelAdapter = mySuperMessageBusAdapter;\n\nawait messageBus.publishMessage(...);\n// \ud83d\ude4c Will work!\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can code your own ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageBusAdapter")," (simply implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageChannelAdapter")," interface), but we highly recommend using an ",(0,a.kt)("a",{parentName:"p",href:"/castore/docs/packages#-message-buses-adapters"},"off-the-shelf adapter")," (if the messaging solution that you use is missing, feel free to create/upvote an issue, or contribute \ud83e\udd17).")),(0,a.kt)("p",null,"The adapter packages will also expose useful generics to type the arguments of your bus listeners. For instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { EventBridgeMessageBusMessage } from '@castore/event-bridge-message-bus-adapter';\n\nconst pokemonMessagesListener = async (\n  // \ud83d\udc47 Specify that you only listen to the pokemonsEventStore messages\n  eventBridgeMessage: EventBridgeMessageBusMessage<\n    typeof appMessageQueue,\n    'POKEMONS'\n  >,\n) => {\n  // \ud83d\udc47 Correctly typed!\n  const message = eventBridgeMessage.detail;\n};\n")),(0,a.kt)("blockquote",null,(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("b",null,"\ud83d\udd27 Reference")),(0,a.kt)("p",null),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Constructor:")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"messageBusId ",(0,a.kt)("i",null,"(string)")),": A string identifying the message bus"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"sourceEventStores ",(0,a.kt)("i",null,"(EventStore[])")),": List of event stores that the message bus will broadcast events from"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"messageBusAdapter ",(0,a.kt)("i",null,"(?MessageChannelAdapter)")),": Message bus adapter")),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Properties:")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"messageBusId ",(0,a.kt)("i",null,"(string)")))),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const appMessageBusId = appMessageBus.messageBusId;\n// => 'APP_MESSAGE_BUS'\n")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"sourceEventStores ",(0,a.kt)("i",null,"(EventStore[])")))),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const appMessageBusSourceEventStores = appMessageBus.sourceEventStores;\n// => [pokemonsEventStore, trainersEventStore...]\n")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"messageChannelAdapter ",(0,a.kt)("i",null,"?MessageChannelAdapter")),": Returns the associated message bus adapter (potentially undefined)")),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const appMessageBusAdapter = appMessageBus.messageChannelAdapter;\n// => undefined (we did not provide one in this example)\n")),(0,a.kt)("p",{parentName:"blockquote"},"\u261d\ufe0f The ",(0,a.kt)("inlineCode",{parentName:"p"},"messageChannelAdapter")," is not read-only so you do not have to provide it right away."),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Async Methods:")),(0,a.kt)("p",{parentName:"blockquote"},"The following methods interact with the messaging solution of your application through a ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageBusAdapter"),". They will throw an ",(0,a.kt)("inlineCode",{parentName:"p"},"UndefinedMessageChannelAdapterError")," if you did not provide one."),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"publishMessage ",(0,a.kt)("i",null,"(message: Message, opt?: OptionsObj = ",") => Promise(void))")),": Publish a ",(0,a.kt)("code",null,"Message")," (of the appropriate type) to the message bus.",(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"OptionsObj")," contains the following properties:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"replay ",(0,a.kt)("i",null,"(?boolean = false)")),": Signals that the event is not happening in real-time, e.g. in maintenance or migration operations. This information can be used downstream to react appropriately. Check the implementation of you adapter for more details."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"publishMessages ",(0,a.kt)("i",null,"(messages: Message[], opt?: OptionsObj) => Promise(void))")),": Publish several ",(0,a.kt)("code",null,"Messages")," (of the appropriate type) to the message bus. Options are similar to the ",(0,a.kt)("code",null,"publishMessage")," options."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"getAggregateAndPublishMessage ",(0,a.kt)("i",null,"((message: NotificationMessage) => Promise(void))")),": _(StateCarryingMessageBuses only)_ Append the matching aggregate (with correct version) to a ",(0,a.kt)("code",null,"NotificationMessage")," and turn it into a ",(0,a.kt)("code",null,"StateCarryingMessage")," before publishing it to the message bus. Uses the message bus event stores: Make sure that they have correct adapters set up.")),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Type Helpers:")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"MessageChannelMessage"),": Given a ",(0,a.kt)("code",null,"MessageBus"),", returns the TS type of its messages")),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { MessageChannelMessage } from '@castore/core';\n\ntype AppMessage = MessageChannelMessage<typeof appMessageBus>;\n\n// \ud83d\udc47 Equivalent to:\ntype AppMessage = EventStoreNotificationMessage<\n  typeof pokemonsEventStore | typeof trainersEventStore...\n>;\n")))))}c.isMDXComponent=!0},35318:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>d});var n=s(27378);function a(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function r(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?r(Object(s),!0).forEach((function(t){a(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,n,a=function(e,t){if(null==e)return{};var s,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||(a[s]=e[s]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var s=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=p(s),m=a,d=g["".concat(l,".").concat(m)]||g[m]||c[m]||r;return s?n.createElement(d,o(o({ref:t},u),{},{components:s})):n.createElement(d,o({ref:t},u))}));function d(e,t){var s=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=s.length,o=new Array(r);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[g]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=s[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,s)}m.displayName="MDXCreateElement"},83523:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/messageBus-5b93cec889fd1288a304a936efb1eca8.png"}}]);